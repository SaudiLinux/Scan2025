#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Israeli Domain Vulnerability Analyzer
أداة تحليل وعرض الثغرات الأمنية للدومينات الإسرائيلية
"""

import json
import sys
from datetime import datetime
from colorama import Fore, Style, init

# Initialize colorama
init(autoreset=True)

class VulnerabilityAnalyzer:
    def __init__(self):
        self.severity_colors = {
            'Critical': Fore.RED + Style.BRIGHT,
            'High': Fore.RED,
            'Medium': Fore.YELLOW,
            'Low': Fore.GREEN,
            'Info': Fore.CYAN
        }
        
        self.vulnerability_types = {
            'SQL Injection': {'severity': 'Critical', 'description': 'حقن أوامر SQL في قاعدة البيانات'},
            'Cross-Site Scripting (XSS)': {'severity': 'High', 'description': 'تنفيذ أكواد JavaScript خبيثة'},
            'Local File Inclusion (LFI)': {'severity': 'High', 'description': 'تضمين ملفات محلية غير مصرح بها'},
            'Command Injection': {'severity': 'Critical', 'description': 'حقن أوامر نظام التشغيل'},
            'Server-Side Request Forgery (SSRF)': {'severity': 'High', 'description': 'تزييف طلبات من الخادم'},
            'Directory Traversal': {'severity': 'Medium', 'description': 'الوصول إلى directories غير مصرح بها'},
            'SSL/TLS Issues': {'severity': 'Medium', 'description': 'مشاكل في تشفير SSL/TLS'},
            'Information Disclosure': {'severity': 'Low', 'description': 'كشف معلومات حساسة'},
            'Default Credentials': {'severity': 'High', 'description': 'استخدام كلمات مرور افتراضية'},
            'Weak Authentication': {'severity': 'Medium', 'description': 'ضعف في آليات المصادقة'}
        }
    
    def print_banner(self):
        """Print the analyzer banner"""
        banner = f"""
{Fore.RED}╔═══════════════════════════════════════════════════════════════════════╗
║              Israeli Domain Vulnerability Analyzer                    ║
║                    محلل الثغرات الأمنية الإسرائيلية                ║
╚═══════════════════════════════════════════════════════════════════════╝{Style.RESET_ALL}
{Fore.CYAN}By: 𝙃𝙖𝙘𝙠𝙞𝙣𝙜 𝙏𝙚𝙘𝙝𝙣𝙤𝙡𝙤𝙜𝙮 🇵🇸{Style.RESET_ALL}
        """
        print(banner)
    
    def load_scan_results(self, filename):
        """Load scan results from JSON file"""
        try:
            with open(filename, 'r', encoding='utf-8') as file:
                return json.load(file)
        except FileNotFoundError:
            print(f"{Fore.RED}[-] File not found: {filename}{Style.RESET_ALL}")
            return None
        except json.JSONDecodeError:
            print(f"{Fore.RED}[-] Invalid JSON format in: {filename}{Style.RESET_ALL}")
            return None
    
    def analyze_vulnerabilities(self, scan_data):
        """Analyze vulnerabilities and extract detailed information"""
        if not scan_data or 'vulnerabilities' not in scan_data:
            print(f"{Fore.YELLOW}[!] No vulnerability data found{Style.RESET_ALL}")
            return []
        
        vulnerabilities = scan_data['vulnerabilities']
        analyzed_vulns = []
        
        for vuln in vulnerabilities:
            if isinstance(vuln, dict):
                vuln_info = {
                    'type': vuln.get('type', 'Unknown'),
                    'severity': vuln.get('severity', 'Unknown'),
                    'url': vuln.get('url', 'Unknown'),
                    'parameter': vuln.get('parameter', 'Unknown'),
                    'payload': vuln.get('payload', 'Unknown'),
                    'description': vuln.get('description', 'No description'),
                    'proof': vuln.get('proof', 'No proof provided'),
                    'domain': vuln.get('domain', 'Unknown')
                }
                analyzed_vulns.append(vuln_info)
            else:
                # Handle simple string format
                vuln_info = {
                    'type': 'Unknown',
                    'severity': 'Unknown',
                    'url': 'Unknown',
                    'parameter': 'Unknown',
                    'payload': str(vuln),
                    'description': 'No detailed description available',
                    'proof': str(vuln),
                    'domain': 'Unknown'
                }
                analyzed_vulns.append(vuln_info)
        
        return analyzed_vulns
    
    def display_vulnerability_summary(self, vulnerabilities):
        """Display vulnerability summary statistics"""
        if not vulnerabilities:
            print(f"{Fore.GREEN}[+] No vulnerabilities found{Style.RESET_ALL}")
            return
        
        # Count vulnerabilities by severity
        severity_counts = {}
        type_counts = {}
        
        for vuln in vulnerabilities:
            severity = vuln.get('severity', 'Unknown')
            vuln_type = vuln.get('type', 'Unknown')
            
            severity_counts[severity] = severity_counts.get(severity, 0) + 1
            type_counts[vuln_type] = type_counts.get(vuln_type, 0) + 1
        
        print(f"\n{Fore.BLUE}{'='*60}{Style.RESET_ALL}")
        print(f"{Fore.CYAN}[+] VULNERABILITY SUMMARY{Style.RESET_ALL}")
        print(f"{Fore.BLUE}{'='*60}{Style.RESET_ALL}")
        
        print(f"\n{Fore.YELLOW}[+] By Severity:{Style.RESET_ALL}")
        for severity, count in sorted(severity_counts.items()):
            color = self.severity_colors.get(severity, Fore.WHITE)
            print(f"  {color}➤ {severity}: {count} vulnerabilities{Style.RESET_ALL}")
        
        print(f"\n{Fore.YELLOW}[+] By Type:{Style.RESET_ALL}")
        for vuln_type, count in sorted(type_counts.items()):
            print(f"  ➤ {vuln_type}: {count} vulnerabilities")
        
        print(f"\n{Fore.BLUE}{'='*60}{Style.RESET_ALL}")
        print(f"{Fore.CYAN}[+] TOTAL VULNERABILITIES: {len(vulnerabilities)}{Style.RESET_ALL}")
        print(f"{Fore.BLUE}{'='*60}{Style.RESET_ALL}")
    
    def display_detailed_vulnerabilities(self, vulnerabilities):
        """Display detailed vulnerability information"""
        if not vulnerabilities:
            return
        
        print(f"\n{Fore.RED}{'='*80}{Style.RESET_ALL}")
        print(f"{Fore.RED}{' '*30}DETAILED VULNERABILITY ANALYSIS{' '*30}{Style.RESET_ALL}")
        print(f"{Fore.RED}{'='*80}{Style.RESET_ALL}")
        
        # Sort by severity (Critical first)
        severity_order = {'Critical': 1, 'High': 2, 'Medium': 3, 'Low': 4, 'Info': 5, 'Unknown': 6}
        vulnerabilities.sort(key=lambda x: severity_order.get(x.get('severity', 'Unknown'), 6))
        
        for i, vuln in enumerate(vulnerabilities, 1):
            severity = vuln.get('severity', 'Unknown')
            vuln_type = vuln.get('type', 'Unknown')
            url = vuln.get('url', 'Unknown')
            parameter = vuln.get('parameter', 'Unknown')
            payload = vuln.get('payload', 'Unknown')
            description = vuln.get('description', 'No description')
            proof = vuln.get('proof', 'No proof')
            domain = vuln.get('domain', 'Unknown')
            
            color = self.severity_colors.get(severity, Fore.WHITE)
            
            print(f"\n{Fore.RED}{'-'*60}{Style.RESET_ALL}")
            print(f"{color}[{i}] {vuln_type} - SEVERITY: {severity}{Style.RESET_ALL}")
            print(f"{Fore.RED}{'-'*60}{Style.RESET_ALL}")
            
            print(f"{Fore.CYAN}Domain: {Fore.WHITE}{domain}{Style.RESET_ALL}")
            print(f"{Fore.CYAN}URL: {Fore.WHITE}{url}{Style.RESET_ALL}")
            print(f"{Fore.CYAN}Parameter: {Fore.WHITE}{parameter}{Style.RESET_ALL}")
            print(f"{Fore.CYAN}Description: {Fore.WHITE}{description}{Style.RESET_ALL}")
            
            if payload != 'Unknown' and len(str(payload)) < 200:
                print(f"{Fore.CYAN}Payload: {Fore.YELLOW}{payload}{Style.RESET_ALL}")
            
            if proof != 'No proof' and proof != 'Unknown':
                proof_text = str(proof)[:300] + "..." if len(str(proof)) > 300 else str(proof)
                print(f"{Fore.CYAN}Proof: {Fore.MAGENTA}{proof_text}{Style.RESET_ALL}")
    
    def display_recommendations(self, vulnerabilities):
        """Display security recommendations"""
        if not vulnerabilities:
            return
        
        print(f"\n{Fore.GREEN}{'='*80}{Style.RESET_ALL}")
        print(f"{Fore.GREEN}{' '*35}SECURITY RECOMMENDATIONS{' '*35}{Style.RESET_ALL}")
        print(f"{Fore.GREEN}{'='*80}{Style.RESET_ALL}")
        
        vuln_types = set(vuln.get('type', 'Unknown') for vuln in vulnerabilities)
        
        recommendations = {
            'SQL Injection': [
                "استخدم معاملات Prepared Statements في جميع استعلامات SQL",
                "قم بتنقية جميع مدخلات المستخدم قبل معالجتها",
                "استخدم Stored Procedures عند الإمكان",
                "قم بتقييد أذونات قاعدة البيانات حسب الحاجة فقط"
            ],
            'Cross-Site Scripting (XSS)': [
                "قم بتنقية وتعقيم جميع مدخلات المستخدم",
                "استخدم Content Security Policy (CSP)",
                "قم بترميز جميع المخرجات HTML",
                "استخدم مكتبات مكافحة XSS مثل OWASP Java Encoder"
            ],
            'Local File Inclusion (LFI)': [
                "قم بقائمة البيضاء للملفات المسموح بها",
                "تجنب استخدام مسارات الملفات من مدخلات المستخدم",
                "استخدم معرفات فريدة بدلاً من أسماء الملفات",
                "قم بتقييد أذونات نظام الملفات"
            ],
            'Command Injection': [
                "تجنب تنفيذ أوامر النظام من مدخلات المستخدم",
                "استخدم دوال آمنة مثل execve() بدلاً من system()",
                "قم بتنقية مدخلات المستخدم بشكل صارم",
                "استخدم أدوات مكافحة Command Injection"
            ],
            'Server-Side Request Forgery (SSRF)': [
                "قم بقائمة البيضاء للعناوين IP والنطاقات المسموح بها",
                "استخدم شبكات منفصلة للخدمات الحساسة",
                "قم بتعطيل الموجهات والبروكسيهات غير الضرورية",
                "استخدم مصادقة صارمة للخدمات الداخلية"
            ],
            'Directory Traversal': [
                "قم بتنقية مسارات الملفات من أي مدخلات",
                "استخدم مسارات نسبية محدودة",
                "قم بتقييد أذونات نظام الملفات",
                "استخدم chroot jail عند الإمكان"
            ]
        }
        
        for vuln_type in vuln_types:
            if vuln_type in recommendations:
                print(f"\n{Fore.YELLOW}[+] {vuln_type}:{Style.RESET_ALL}")
                for rec in recommendations[vuln_type]:
                    print(f"  {Fore.GREEN}➤ {rec}{Style.RESET_ALL}")
        
        # General recommendations
        print(f"\n{Fore.YELLOW}[+] General Security Recommendations:{Style.RESET_ALL}")
        general_recs = [
            "قم بتحديث جميع المكتبات والإطارات بانتظام",
            "استخدم أحدث إصدارات البرامج",
            "قم بتنفيذ مراجعات أمنية منتظمة للكود",
            "استخدم أدوات فحص الأمان الأوتوماتيكية",
            "قم بتدريب فريق التطوير على أفضل ممارسات الأمان"
        ]
        
        for rec in general_recs:
            print(f"  {Fore.GREEN}➤ {rec}{Style.RESET_ALL}")
    
    def export_detailed_report(self, vulnerabilities, scan_info, filename=None):
        """Export detailed vulnerability report"""
        if not filename:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"vulnerability_analysis_{timestamp}.json"
        
        report_data = {
            'scan_info': scan_info,
            'vulnerability_summary': {
                'total_vulnerabilities': len(vulnerabilities),
                'severity_breakdown': {},
                'type_breakdown': {}
            },
            'detailed_vulnerabilities': vulnerabilities,
            'recommendations': self.generate_recommendations_list(vulnerabilities)
        }
        
        # Calculate severity breakdown
        severity_counts = {}
        type_counts = {}
        
        for vuln in vulnerabilities:
            severity = vuln.get('severity', 'Unknown')
            vuln_type = vuln.get('type', 'Unknown')
            
            severity_counts[severity] = severity_counts.get(severity, 0) + 1
            type_counts[vuln_type] = type_counts.get(vuln_type, 0) + 1
        
        report_data['vulnerability_summary']['severity_breakdown'] = severity_counts
        report_data['vulnerability_summary']['type_breakdown'] = type_counts
        
        with open(filename, 'w', encoding='utf-8') as file:
            json.dump(report_data, file, indent=2, ensure_ascii=False)
        
        print(f"{Fore.GREEN}[+] Detailed report exported: {filename}{Style.RESET_ALL}")
        return filename
    
    def generate_recommendations_list(self, vulnerabilities):
        """Generate recommendations list based on found vulnerabilities"""
        if not vulnerabilities:
            return []
        
        vuln_types = set(vuln.get('type', 'Unknown') for vuln in vulnerabilities)
        recommendations = []
        
        recommendations_map = {
            'SQL Injection': "Implement parameterized queries and input validation",
            'Cross-Site Scripting (XSS)': "Sanitize all user inputs and implement CSP",
            'Local File Inclusion (LFI)': "Use whitelisting for file paths",
            'Command Injection': "Avoid system commands with user input",
            'Server-Side Request Forgery (SSRF)': "Implement IP whitelisting",
            'Directory Traversal': "Validate and sanitize file paths"
        }
        
        for vuln_type in vuln_types:
            if vuln_type in recommendations_map:
                recommendations.append(recommendations_map[vuln_type])
        
        return recommendations
    
    def run_analysis(self, input_file):
        """Run complete vulnerability analysis"""
        self.print_banner()
        
        print(f"{Fore.YELLOW}[*] Loading scan results from: {input_file}{Style.RESET_ALL}")
        scan_data = self.load_scan_results(input_file)
        
        if not scan_data:
            return
        
        print(f"{Fore.YELLOW}[*] Analyzing vulnerabilities...{Style.RESET_ALL}")
        vulnerabilities = self.analyze_vulnerabilities(scan_data)
        
        # Display summary
        self.display_vulnerability_summary(vulnerabilities)
        
        # Display detailed vulnerabilities
        self.display_detailed_vulnerabilities(vulnerabilities)
        
        # Display recommendations
        self.display_recommendations(vulnerabilities)
        
        # Export detailed report
        report_filename = self.export_detailed_report(vulnerabilities, scan_data.get('scan_info', {}))
        
        # Final summary
        print(f"\n{Fore.BLUE}{'='*80}{Style.RESET_ALL}")
        print(f"{Fore.GREEN}[+] ANALYSIS COMPLETED SUCCESSFULLY!{Style.RESET_ALL}")
        print(f"{Fore.CYAN}[+] Total vulnerabilities analyzed: {len(vulnerabilities)}{Style.RESET_ALL}")
        print(f"{Fore.CYAN}[+] Detailed report saved: {report_filename}{Style.RESET_ALL}")
        print(f"{Fore.BLUE}{'='*80}{Style.RESET_ALL}")

def main():
    if len(sys.argv) < 2:
        print(f"{Fore.RED}Usage: python vulnerability_analyzer.py <scan_results.json>{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}Example: python vulnerability_analyzer.py test_report.json{Style.RESET_ALL}")
        sys.exit(1)
    
    analyzer = VulnerabilityAnalyzer()
    analyzer.run_analysis(sys.argv[1])

if __name__ == '__main__':
    main()